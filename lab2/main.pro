implement main
    open core, stdio, file

domains
    pharmacy_name = string.

class facts - pharmacy
    аптека : (integer ID_аптеки, pharmacy_name Название_аптеки, string Адрес, string Телефон).
    лекарство : (integer ID_лекарства, string Название_лекарства).
    продает : (integer ID_аптеки, integer ID_лекарства, real Стоимость, integer Количество).

class facts
    s : (real Sum) single.

clauses
    s(0).

class predicates
    доступные_лекарства : (pharmacy_name Название_аптеки) nondeterm.
    аптеки_с_лекарством : (string Лекарство) nondeterm.
    адрес_аптеки_с_наименьшей_ценой_лекарства : (string Лекарство) failure.
    общая_стоимость_лекарств_аптеки : (pharmacy_name Аптека) nondeterm.
    адрес_аптеки_где_заданное_лекарство_есть_в_количестве_не_менее_чем_N : (string Лекарство, integer N) failure.

clauses
    доступные_лекарства(Название_аптеки) :-
        writef("\tАссортимент аптеки %s:\n", Название_аптеки),
        аптека(ID_аптеки, Название_аптеки, _, _),
        продает(ID_аптеки, ID_лекарства, Стоимость, Количество),
        лекарство(ID_лекарства, Лекарство),
        writef("\tЛекарство: %s\n", Лекарство),
        writef("\tСтоимость: %f\n", Стоимость),
        writef("\tКоличество: %d\n", Количество),
        write("\n"),
        fail.
    доступные_лекарства(Название_аптеки) :-
        аптека(_, Название_аптеки, _, _),
        write("\tКонец списка\n"),
        nl.

clauses
    аптеки_с_лекарством(Лекарство) :-
        writef("\t%s находится в следующих аптеках:\n", Лекарство),
        лекарство(ID_лекарства, Лекарство),
        продает(ID_аптеки, ID_лекарства, _, _),
        аптека(ID_аптеки, Аптека, Телефон, Адрес),
        writef("\tАптека: %s\n", Аптека),
        writef("\tТелефон: %s\n", Телефон),
        writef("\tАдрес: %s\n", Адрес),
        write("\n"),
        fail.
    аптеки_с_лекарством(Лекарство) :-
        лекарство(_, Лекарство),
        write("\tКонец списка\n"),
        nl.

clauses
    адрес_аптеки_с_наименьшей_ценой_лекарства(Лекарство) :-
        лекарство(ID_лекарства, Лекарство),
        продает(ID_аптеки, ID_лекарства, Стоимость1, _),
        аптека(ID_аптеки, _, _, Адрес),
        not((продает(_, ID_лекарства, Стоимость2, _) and Стоимость2 < Стоимость1)),
        writef("\tСамый дешевый %s находится в аптеке по адресу: %s\n", Лекарство, Адрес),
        write("\n"),
        fail.

clauses
    общая_стоимость_лекарств_аптеки(Аптека) :-
        аптека(ID_аптеки, Аптека, _, _),
        продает(ID_аптеки, _, Стоимость, Количество),
        s(Sum),
        assert(s(Sum + Стоимость * Количество)),
        fail.
    общая_стоимость_лекарств_аптеки(Аптека) :-
        аптека(_, Аптека, _, _),
        s(Sum),
        writef("\tОбщая стоимость лекарств в аптеке % равна %\n", Аптека, Sum),
        write("\n"),
        nl.

clauses
    адрес_аптеки_где_заданное_лекарство_есть_в_количестве_не_менее_чем_N(Лекарство, N) :-
        лекарство(ID_лекарства, Лекарство),
        продает(ID_аптеки, ID_лекарства, _, Количество),
        Количество >= N,
        аптека(ID_аптеки, _, _, Адрес),
        writef("\tАдрес аптеки, где % есть в количестве не менее, чем %: %", Лекарство, N, Адрес),
        write("\n"),
        fail.

clauses
    run() :-
        console::init(),
        reconsult("../pharmacy.txt", pharmacy),
        fail.

    run() :-
        доступные_лекарства("Горздрав"),
        fail.

    run() :-
        аптеки_с_лекарством("Нурофен"),
        fail.

    run() :-
        адрес_аптеки_с_наименьшей_ценой_лекарства("Цитрамон").

    run() :-
        общая_стоимость_лекарств_аптеки("Столички"),
        fail.

    run() :-
        адрес_аптеки_где_заданное_лекарство_есть_в_количестве_не_менее_чем_N("Цитрамон", 11).

    run().

end implement main

goal
    console::run(main::run).
